package ncku.topology.web;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import ncku.topology.model.PowerGridMetrics;

@RestController
public class PowerGridController {
  Logger logger = LoggerFactory.getLogger(this.getClass());

  @Autowired
  PowerGridMetrics powerGridMetrics;

  @PostMapping("/power/anynet/metrics")
  public String anynetUploadFile(MultipartFile file,
                                 String metrics,
                                 Float alpha,
                                 Float beta,
                                 String alphaArrStr,
                                 Float betaArr) throws IOException {

    List<List<String>> records = new ArrayList<>();

    try (BufferedReader br = new BufferedReader(new InputStreamReader(file.getInputStream()))) {
      String line;
      while ((line = br.readLine()) != null) {
        // -1, 取消省略 empty value
        String[] values = line.split(",", -1);
        records.add(Arrays.asList(values));
      }
    } catch (Exception e) {
      e.printStackTrace();
      return "File Read Error!";
    }

    /* Read Anynet Topology */
    ArrayList<Integer> src = new ArrayList<>();
    ArrayList<Integer> dst = new ArrayList<>();
    int totalN = records.get(0).size() - 1;
    // double distance = 0;
    // double avgDistance = 0;

    // 第 0 列為節點名稱，故省略。
    for (int i = 1; i < records.size(); i++) {
      // 第 0 欄為起點節點名稱。
      for (int j = 1; j < records.get(i).size(); j++) {
        if (records.get(i).get(j).equals("1")) {
          // 起點節點編號
          src.add(i - 1);
          // 終點節點編號
          dst.add(j - 1);
        }
      }
    }

    return powerGridMetrics.anynet(src, dst, totalN, metrics, alpha, beta, alphaArrStr, betaArr);
  }


  @PostMapping("/power/anylength/metrics")
  public String anynetLengthMetrics(MultipartFile file, String metrics) throws IOException {

    List<List<String>> records = new ArrayList<>();

    try (BufferedReader br = new BufferedReader(new InputStreamReader(file.getInputStream()))) {
      String line;
      while ((line = br.readLine()) != null) {
        // -1, 取消省略 empty value
        String[] values = line.split(",", -1);
        records.add(Arrays.asList(values));
      }
    } catch (Exception e) {
      e.printStackTrace();
      return "File Read Error!";
    }

    /* Read Anynet Topology */
    ArrayList<Integer> src = new ArrayList<>();
    ArrayList<Integer> dst = new ArrayList<>();
    ArrayList<Float> lengthArr = new ArrayList<>();
    int totalN = records.get(0).size() - 1;

    // 第 0 列為節點名稱，故省略。
    for (int i = 1; i < records.size(); i++) {
      // 第 0 欄為起點節點名稱。
      for (int j = 1; j < records.get(i).size(); j++) {
        if (!records.get(i).get(j).equals("")) {
          // 起點節點編號
          src.add(i - 1);
          // 終點節點編號
          dst.add(j - 1);
          lengthArr.add(Float.parseFloat(records.get(i).get(j)));
        }
      }
    }

    // System.out.println(src);
    // System.out.println(dst);
    // System.out.println(lengthArr);

    // 起終節點數目檢查
    if (src.size() != dst.size()) {
      System.out.println("Source and destination size not match!");
      return "Source and destination size not match!";
    }

    PowerGridMetrics powerGridMetrics = new PowerGridMetrics();

    String results = "<p>=== Any Network ===</p>"
            + "<p> src: " + src + "</p>"
            + "<p> dst: " + dst + "</p>"
            + "<p> Total Nodes: " + totalN + "</p>"
            + "<p> Total K: " + src.size() / 2 + "</p>";

    System.out.println(metrics);

    switch (metrics) {
      case "EfficiencyAndVulnerabilityLength":
        return powerGridMetrics.vulnerabilityLength(src, dst, lengthArr, totalN, results, metrics);
    }

    return results;
  }
}
package ncku.topology.model;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import static java.lang.System.exit;

public class PowerGridSort {
  Logger logger = LoggerFactory.getLogger(this.getClass());

  double[][] sortBase;
  int i = 0, sortNum, sortLength;

  public void ArrayModel(int arrayNum, int arrayLength) {
    sortLength = arrayLength;
    sortNum = arrayNum;
    sortBase = new double[sortNum][sortLength];
  }

  public void AddArray(double[] data) {
    if (data.length != sortLength) {
      System.err.append("InputColumnLength/SortColumnLength size not match!!");
      exit(1);
    } else {
      sortBase[i] = data;
      i++;
    }
  }

  public double[][] StartSorting(int sortingByNum, int sortType) {
    if (i == sortNum) {
      switch (sortType) {
        // Small to Large
        case 0:
          for (int a = 0; a < sortLength; a++) {
            for (int j = a + 1; j < sortLength; j++) {
              if (sortBase[sortingByNum][a] > sortBase[sortingByNum][j]) {
                for (int k = 0; k < sortNum; k++) {
                  double value;
                  value = sortBase[k][a];
                  sortBase[k][a] = sortBase[k][j];
                  sortBase[k][j] = value;
                }
              }
            }
          }
          break;
        // Large to Small
        case 1:
          for (int a = 0; a < sortLength; a++) {
            for (int j = a + 1; j < sortLength; j++) {
              if (sortBase[sortingByNum][a] < sortBase[sortingByNum][j]) {
                for (int k = 0; k < sortNum; k++) {
                  double value;
                  value = sortBase[k][a];
                  sortBase[k][a] = sortBase[k][j];
                  sortBase[k][j] = value;
                }
              }
            }
          }
          break;
      }
    } else {
      System.err.append("InputRowNum/SortRowNum size not match!!");
      exit(1);
    }
    return sortBase;
  }
}
